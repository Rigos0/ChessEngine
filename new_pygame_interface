import pygame
from New_Board import *
from Evaluation import select_random_move
from Evaluation import static_evaluation
import time

white = (255, 255, 255)
black = (0, 0, 0)
brown = (145, 91, 57)
light_blue = (204, 255, 255)




def get_square(x, y):
    ranks = ["1", "2", "3", "4", "5", "6", "7", "8"]
    files = ["a", "b", "c", "d", "e", "f", "g", "h"]
    counter = 120
    counter2 = -1
    file = None
    rank = None

    for i in range(8):
        if counter < y < counter + 80:
            rank = ranks[counter2]
            break
        else:
            counter += 80
            counter2 -= 1
    counter2 = 0
    counter = 100
    for i in range(8):
        if counter < x < counter + 80:
            file = files[counter2]
            break
        else:
            counter += 80
            counter2 += 1
    if file and rank:
        selected_square = file + rank
        return selected_square

def from_human_notation_to_27_118(square):
    squares = {
        27: "a1",
        28: "b1",
        29: "c1",
        30: "d1",
        31: "e1",
        32: "f1",
        33: "g1",
        34: "h1",
        39: "a2",
        40: "b2",
        41: "c2",
        42: "d2",
        43: "e2",
        44: "f2",
        45: "g2",
        46: "h2",
        51: "a3",
        52: "b3",
        53: "c3",
        54: "d3",
        55: "e3",
        56: "f3",
        57: "g3",
        58: "h3",
        63: "a4",
        64: "b4",
        65: "c4",
        66: "d4",
        67: "e4",
        68: "f4",
        69: "g4",
        70: "h4",
        75: "a5",
        76: "b5",
        77: "c5",
        78: "d5",
        79: "e5",
        80: "f5",
        81: "g5",
        82: "h5",
        87: "a6",
        88: "b6",
        89: "c6",
        90: "d6",
        91: "e6",
        92: "f6",
        93: "g6",
        94: "h6",
        99: "a7",
        100: "b7",
        101: "c7",
        102: "d7",
        103: "e7",
        104: "f7",
        105: "g7",
        106: "h7",
        111: "a8",
        112: "b8",
        113: "c8",
        114: "d8",
        115: "e8",
        116: "f8",
        117: "g8",
        118: "h8"}
    if square:
        converted = list(squares.keys())[list(squares.values()).index(square)]
        return converted

def square_to_pos(square):
    ranks = ["8", "7", "6", "5", "4", "3", "2", "1"]
    files = ["a", "b", "c", "d", "e", "f", "g", "h"]

    x_index = files.index(square[0])
    x_pos = 100 + x_index * 80
    y_index = ranks.index(square[1])
    y_pos = 120 + y_index * 80
    pos = (x_pos, y_pos)
    return pos




def chessboard():
    # Size of squares
    size = 80

    # board length, must be even
    boardLength = 8

    surface.fill((25, 10, 0))
    cnt = 0
    for i in range(1, boardLength + 1):
        for z in range(1, boardLength + 1):
            # check if current loop value is even
            if cnt % 2 == 0:
                pygame.draw.rect(surface, (255, 204, 155), [21 +(size * z), 40+(size * i), size, size])
            else:
                pygame.draw.rect(surface, brown, [21 + (size * z), 40+ (size * i), size, size])
            cnt += 1
        # since theres an even number of squares go back one value
        cnt -= 1
    # Add a nice boarder
    pygame.draw.rect(surface, black, [21+size, 40+size, boardLength * size, boardLength * size],2)
    # surface.blit(chess_board, (100, 120))


def blit_dots(dots):
    if dots:
        for square in dots:
                convert = get_notation_from_27_118(square)
                pos = square_to_pos(convert)
                pygame.draw.rect(surface, (235, 99, 31), [pos[0] , pos[1], 80, 80], 5)

knight = pygame.image.load("whiteknight.png")
knight = pygame.transform.scale(knight, (74, 74))
pawn = pygame.image.load("whitepawn.png")
pawn = pygame.transform.scale(pawn, (74, 74))
bishop = pygame.image.load("whitebishop.png")
bishop = pygame.transform.scale(bishop, (75, 75))
rook = pygame.image.load("whiterook.png")
rook = pygame.transform.scale(rook, (70, 70))
queen = pygame.image.load("whitequeen.png")
queen = pygame.transform.scale(queen, (73, 73))
king = pygame.image.load("whiteking.png")
king = pygame.transform.scale(king, (76, 76))

def get_notation_from_27_118(square):
    squares = {
        27: "a1",
        28: "b1",
        29: "c1",
        30: "d1",
        31: "e1",
        32: "f1",
        33: "g1",
        34: "h1",
        39: "a2",
        40: "b2",
        41: "c2",
        42: "d2",
        43: "e2",
        44: "f2",
        45: "g2",
        46: "h2",
        51: "a3",
        52: "b3",
        53: "c3",
        54: "d3",
        55: "e3",
        56: "f3",
        57: "g3",
        58: "h3",
        63: "a4",
        64: "b4",
        65: "c4",
        66: "d4",
        67: "e4",
        68: "f4",
        69: "g4",
        70: "h4",
        75: "a5",
        76: "b5",
        77: "c5",
        78: "d5",
        79: "e5",
        80: "f5",
        81: "g5",
        82: "h5",
        87: "a6",
        88: "b6",
        89: "c6",
        90: "d6",
        91: "e6",
        92: "f6",
        93: "g6",
        94: "h6",
        99: "a7",
        100: "b7",
        101: "c7",
        102: "d7",
        103: "e7",
        104: "f7",
        105: "g7",
        106: "h7",
        111: "a8",
        112: "b8",
        113: "c8",
        114: "d8",
        115: "e8",
        116: "f8",
        117: "g8",
        118: "h8"}

    return_this = squares.get(square)
    return return_this

def blit_knight():
    for i in w_pieces.w_knights:
        square = get_notation_from_27_118(i)
        pos = square_to_pos(square)
        pos = (pos[0] + 2, pos[1] + 3)
        surface.blit(knight, pos)


def blit_pawn():
    for i in w_pieces.w_pawns:
        square = get_notation_from_27_118(i)
        pos = square_to_pos(square)
        pos = (pos[0] +3, pos[1] + 5)
        surface.blit(pawn, pos)


def blit_bishop():
    for i in w_pieces.w_bishops:
        square = get_notation_from_27_118(i)
        pos = square_to_pos(square)
        pos = (pos[0] + 2, pos[1] + 2)
        surface.blit(bishop, pos)


def blit_queen():
    for i in w_pieces.w_queen:
        square = get_notation_from_27_118(i)
        pos = square_to_pos(square)
        pos = (pos[0] + 2, pos[1] + 3)
        surface.blit(queen, pos)


def blit_rook():
    for i in w_pieces.w_rooks:
        square = get_notation_from_27_118(i)

        pos = square_to_pos(square)
        pos = (pos[0] + 6, pos[1] + 8)
        surface.blit(rook, pos)


def blit_king():
    for i in w_pieces.w_king:
        square = get_notation_from_27_118(i)
        pos = square_to_pos(square)
        pos = (pos[0] + 2, pos[1] + 2)
        surface.blit(king, pos)


blackknight = pygame.image.load("blackknight.png")
blackknight = pygame.transform.scale(blackknight, (76, 76))
blackpawn = pygame.image.load("blackpawn.png")
blackpawn = pygame.transform.scale(blackpawn, (74, 74))
blackbishop = pygame.image.load("blackbishop.png")
blackbishop = pygame.transform.scale(blackbishop, (75, 75))
blackrook = pygame.image.load("blackrook.png")
blackrook = pygame.transform.scale(blackrook, (73, 73))
blackqueen = pygame.image.load("blackqueen.png")
blackqueen = pygame.transform.scale(blackqueen, (74, 74))
blackking = pygame.image.load("blackking.png")
blackking = pygame.transform.scale(blackking, (76, 76))


def blit_b_pawn():
    for i in b_pieces.b_pawns:
        square = get_notation_from_27_118(i)
        pos = square_to_pos(square)
        pos = (pos[0] + 3, pos[1] + 5)
        surface.blit(blackpawn, pos)


def blit_b_bishop():
    for i in b_pieces.b_bishops:
        square = get_notation_from_27_118(i)
        pos = square_to_pos(square)
        pos = (pos[0] + 2, pos[1] + 2)
        surface.blit(blackbishop, pos)


def blit_b_queen():
    for i in b_pieces.b_queen:
        square = get_notation_from_27_118(i)
        pos = square_to_pos(square)
        pos = (pos[0] + 2, pos[1] + 3)
        surface.blit(blackqueen, pos)


def blit_b_rook():
    for i in b_pieces.b_rooks:
        square = get_notation_from_27_118(i)
        pos = square_to_pos(square)
        pos = (pos[0] + 2, pos[1] + 4)
        surface.blit(blackrook, pos)


def blit_b_king():
    for i in b_pieces.b_king:
        square = get_notation_from_27_118(i)
        pos = square_to_pos(square)
        pos = (pos[0] + 2, pos[1] + 2)
        surface.blit(blackking, pos)


def blit_b_knight():
    for i in b_pieces.b_knights:
        square = get_notation_from_27_118(i)
        pos = square_to_pos(square)
        pos = (pos[0], pos[1] + 2)
        surface.blit(blackknight, pos)


pygame.init()
myfont = pygame.font.SysFont('Comic Sans MS', 30)
pygame.font.init()  # you have to call this at the start,
screensize = pygame.display.Info()
surface = pygame.display.set_mode((screensize.current_h, screensize.current_w), pygame.RESIZABLE)

global checkmate
checkmate = False


def interface_main():
    while True:
        move_pieces("white", surface)
        move_pieces("black", surface)
        print(static_evaluation())


def move_pieces(side_to_move, surface):
    global checkmate
    if side_to_move == "white":
        w_pieces.create_moves_dict("create")
        dictionary_with_moves = w_pieces.delete_move_if_check()

    else:
        b_pieces.create_moves_dict("create")
        dictionary_with_moves = b_pieces.delete_move_if_check()
    possible_moves = []
    initial_square = []
    while True:
        surface.fill((0, 0, 0))
        chessboard()  # this is just to draw a board

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
            if event.type == pygame.VIDEORESIZE:
                surface = pygame.display.set_mode((event.w, event.h), pygame.RESIZABLE)

            # if event.type == pygame.MOUSEBUTTONDOWN:
            #     x, y = pygame.mouse.get_pos()
            #     selected_square = get_square(x, y)
            #     # get a square we clicked on in 27 to 118 notation
            #     converted_square = from_human_notation_to_27_118(selected_square)
            #     if not initial_square:
            #         initial_square.append(converted_square)
            #
            #     if converted_square and possible_moves:
            #         if converted_square in possible_moves:
            #             # send move according to selected piece and square
            #             send_this_move = [initial_square[0], converted_square]
            #             if side_to_move == "white":
            #                 w_pieces.move_a_piece(send_this_move, "o")
            #                 w_pieces.delete_taken_pieces()
            #             else:
            #                 b_pieces.move_a_piece(send_this_move, "o")
            #                 b_pieces.delete_taken_pieces()
            #             return
            #         else:
            #             initial_square = [converted_square]
            #             possible_moves = dictionary_with_moves.get(converted_square)
            #     else:
            #         initial_square = [converted_square]
            #         possible_moves = dictionary_with_moves.get(converted_square)



        blit_dots(possible_moves)
        blit_pawn()
        blit_bishop()
        blit_knight()
        blit_rook()
        blit_queen()
        blit_king()
        blit_b_knight()
        blit_b_pawn()
        blit_b_bishop()
        blit_b_rook()
        blit_b_queen()
        blit_b_king()
        if not dictionary_with_moves:
            pygame.draw.rect(surface, black, (765, 370, 310, 115))
            pygame.draw.rect(surface, white, (740, 375, 300, 105))
            myfont = pygame.font.SysFont('Calibri', 50)
            textsurface = myfont.render('Checkmate', True, (0, 0, 0))
            surface.blit(textsurface, (810, 400))
            checkmate = True

        pygame.display.update()
        time.sleep(0)
        if not checkmate:
            if side_to_move == "black":
                random_move = select_random_move(dictionary_to_nested_list(dictionary_with_moves))
                b_pieces.move_a_piece(random_move, "o")
                b_pieces.delete_taken_pieces()
                return
            elif side_to_move == "white":
                random_move = select_random_move(dictionary_to_nested_list(dictionary_with_moves))
                w_pieces.move_a_piece(random_move, "o")
                w_pieces.delete_taken_pieces()
                return

interface_main()
